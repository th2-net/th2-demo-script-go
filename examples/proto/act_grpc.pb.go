// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: grpc/proto/act.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ActClient is the client API for Act service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActClient interface {
	// This action executes next steps:
	// 1) Registers checkpoint in Verifier microservice
	// 2) Sends passed message as is to Connectivity microservice
	// 3) Waits Execution Report or Business Message Reject with the same ClOrdID as in passed message
	// from Connectivity microservice
	// 4) Returns the message repose and the Checkpoint
	PlaceOrderFIX(ctx context.Context, in *PlaceMessageRequest, opts ...grpc.CallOption) (*PlaceMessageResponse, error)
	PlaceCancelFIX(ctx context.Context, in *PlaceMessageRequest, opts ...grpc.CallOption) (*PlaceMessageResponse, error)
	// Send fix message without response awaiting
	SendMessage(ctx context.Context, in *PlaceMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	PlaceQuoteRequestFIX(ctx context.Context, in *PlaceMessageRequest, opts ...grpc.CallOption) (*PlaceMessageResponse, error)
	PlaceQuoteFIX(ctx context.Context, in *PlaceMessageRequest, opts ...grpc.CallOption) (*PlaceMessageResponse, error)
	PlaceOrderMassCancelRequestFIX(ctx context.Context, in *PlaceMessageRequest, opts ...grpc.CallOption) (*PlaceMessageResponse, error)
	PlaceQuoteCancelFIX(ctx context.Context, in *PlaceMessageRequest, opts ...grpc.CallOption) (*PlaceMessageResponse, error)
	PlaceQuoteResponseFIX(ctx context.Context, in *PlaceMessageRequest, opts ...grpc.CallOption) (*PlaceMessageResponse, error)
	PlaceSecurityStatusRequest(ctx context.Context, in *PlaceMessageRequest, opts ...grpc.CallOption) (*PlaceMessageResponse, error)
}

type actClient struct {
	cc grpc.ClientConnInterface
}

func NewActClient(cc grpc.ClientConnInterface) ActClient {
	return &actClient{cc}
}

func (c *actClient) PlaceOrderFIX(ctx context.Context, in *PlaceMessageRequest, opts ...grpc.CallOption) (*PlaceMessageResponse, error) {
	out := new(PlaceMessageResponse)
	err := c.cc.Invoke(ctx, "/Act/placeOrderFIX", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actClient) PlaceCancelFIX(ctx context.Context, in *PlaceMessageRequest, opts ...grpc.CallOption) (*PlaceMessageResponse, error) {
	out := new(PlaceMessageResponse)
	err := c.cc.Invoke(ctx, "/Act/placeCancelFIX", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actClient) SendMessage(ctx context.Context, in *PlaceMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, "/Act/sendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actClient) PlaceQuoteRequestFIX(ctx context.Context, in *PlaceMessageRequest, opts ...grpc.CallOption) (*PlaceMessageResponse, error) {
	out := new(PlaceMessageResponse)
	err := c.cc.Invoke(ctx, "/Act/placeQuoteRequestFIX", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actClient) PlaceQuoteFIX(ctx context.Context, in *PlaceMessageRequest, opts ...grpc.CallOption) (*PlaceMessageResponse, error) {
	out := new(PlaceMessageResponse)
	err := c.cc.Invoke(ctx, "/Act/placeQuoteFIX", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actClient) PlaceOrderMassCancelRequestFIX(ctx context.Context, in *PlaceMessageRequest, opts ...grpc.CallOption) (*PlaceMessageResponse, error) {
	out := new(PlaceMessageResponse)
	err := c.cc.Invoke(ctx, "/Act/placeOrderMassCancelRequestFIX", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actClient) PlaceQuoteCancelFIX(ctx context.Context, in *PlaceMessageRequest, opts ...grpc.CallOption) (*PlaceMessageResponse, error) {
	out := new(PlaceMessageResponse)
	err := c.cc.Invoke(ctx, "/Act/placeQuoteCancelFIX", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actClient) PlaceQuoteResponseFIX(ctx context.Context, in *PlaceMessageRequest, opts ...grpc.CallOption) (*PlaceMessageResponse, error) {
	out := new(PlaceMessageResponse)
	err := c.cc.Invoke(ctx, "/Act/placeQuoteResponseFIX", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actClient) PlaceSecurityStatusRequest(ctx context.Context, in *PlaceMessageRequest, opts ...grpc.CallOption) (*PlaceMessageResponse, error) {
	out := new(PlaceMessageResponse)
	err := c.cc.Invoke(ctx, "/Act/placeSecurityStatusRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActServer is the server API for Act service.
// All implementations must embed UnimplementedActServer
// for forward compatibility
type ActServer interface {
	// This action executes next steps:
	// 1) Registers checkpoint in Verifier microservice
	// 2) Sends passed message as is to Connectivity microservice
	// 3) Waits Execution Report or Business Message Reject with the same ClOrdID as in passed message
	// from Connectivity microservice
	// 4) Returns the message repose and the Checkpoint
	PlaceOrderFIX(context.Context, *PlaceMessageRequest) (*PlaceMessageResponse, error)
	PlaceCancelFIX(context.Context, *PlaceMessageRequest) (*PlaceMessageResponse, error)
	// Send fix message without response awaiting
	SendMessage(context.Context, *PlaceMessageRequest) (*SendMessageResponse, error)
	PlaceQuoteRequestFIX(context.Context, *PlaceMessageRequest) (*PlaceMessageResponse, error)
	PlaceQuoteFIX(context.Context, *PlaceMessageRequest) (*PlaceMessageResponse, error)
	PlaceOrderMassCancelRequestFIX(context.Context, *PlaceMessageRequest) (*PlaceMessageResponse, error)
	PlaceQuoteCancelFIX(context.Context, *PlaceMessageRequest) (*PlaceMessageResponse, error)
	PlaceQuoteResponseFIX(context.Context, *PlaceMessageRequest) (*PlaceMessageResponse, error)
	PlaceSecurityStatusRequest(context.Context, *PlaceMessageRequest) (*PlaceMessageResponse, error)
	mustEmbedUnimplementedActServer()
}

// UnimplementedActServer must be embedded to have forward compatible implementations.
type UnimplementedActServer struct {
}

func (UnimplementedActServer) PlaceOrderFIX(context.Context, *PlaceMessageRequest) (*PlaceMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrderFIX not implemented")
}
func (UnimplementedActServer) PlaceCancelFIX(context.Context, *PlaceMessageRequest) (*PlaceMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceCancelFIX not implemented")
}
func (UnimplementedActServer) SendMessage(context.Context, *PlaceMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedActServer) PlaceQuoteRequestFIX(context.Context, *PlaceMessageRequest) (*PlaceMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceQuoteRequestFIX not implemented")
}
func (UnimplementedActServer) PlaceQuoteFIX(context.Context, *PlaceMessageRequest) (*PlaceMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceQuoteFIX not implemented")
}
func (UnimplementedActServer) PlaceOrderMassCancelRequestFIX(context.Context, *PlaceMessageRequest) (*PlaceMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrderMassCancelRequestFIX not implemented")
}
func (UnimplementedActServer) PlaceQuoteCancelFIX(context.Context, *PlaceMessageRequest) (*PlaceMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceQuoteCancelFIX not implemented")
}
func (UnimplementedActServer) PlaceQuoteResponseFIX(context.Context, *PlaceMessageRequest) (*PlaceMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceQuoteResponseFIX not implemented")
}
func (UnimplementedActServer) PlaceSecurityStatusRequest(context.Context, *PlaceMessageRequest) (*PlaceMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceSecurityStatusRequest not implemented")
}
func (UnimplementedActServer) mustEmbedUnimplementedActServer() {}

// UnsafeActServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActServer will
// result in compilation errors.
type UnsafeActServer interface {
	mustEmbedUnimplementedActServer()
}

func RegisterActServer(s grpc.ServiceRegistrar, srv ActServer) {
	s.RegisterService(&Act_ServiceDesc, srv)
}

func _Act_PlaceOrderFIX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActServer).PlaceOrderFIX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Act/placeOrderFIX",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActServer).PlaceOrderFIX(ctx, req.(*PlaceMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Act_PlaceCancelFIX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActServer).PlaceCancelFIX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Act/placeCancelFIX",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActServer).PlaceCancelFIX(ctx, req.(*PlaceMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Act_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Act/sendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActServer).SendMessage(ctx, req.(*PlaceMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Act_PlaceQuoteRequestFIX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActServer).PlaceQuoteRequestFIX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Act/placeQuoteRequestFIX",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActServer).PlaceQuoteRequestFIX(ctx, req.(*PlaceMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Act_PlaceQuoteFIX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActServer).PlaceQuoteFIX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Act/placeQuoteFIX",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActServer).PlaceQuoteFIX(ctx, req.(*PlaceMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Act_PlaceOrderMassCancelRequestFIX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActServer).PlaceOrderMassCancelRequestFIX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Act/placeOrderMassCancelRequestFIX",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActServer).PlaceOrderMassCancelRequestFIX(ctx, req.(*PlaceMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Act_PlaceQuoteCancelFIX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActServer).PlaceQuoteCancelFIX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Act/placeQuoteCancelFIX",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActServer).PlaceQuoteCancelFIX(ctx, req.(*PlaceMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Act_PlaceQuoteResponseFIX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActServer).PlaceQuoteResponseFIX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Act/placeQuoteResponseFIX",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActServer).PlaceQuoteResponseFIX(ctx, req.(*PlaceMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Act_PlaceSecurityStatusRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActServer).PlaceSecurityStatusRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Act/placeSecurityStatusRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActServer).PlaceSecurityStatusRequest(ctx, req.(*PlaceMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Act_ServiceDesc is the grpc.ServiceDesc for Act service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Act_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Act",
	HandlerType: (*ActServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "placeOrderFIX",
			Handler:    _Act_PlaceOrderFIX_Handler,
		},
		{
			MethodName: "placeCancelFIX",
			Handler:    _Act_PlaceCancelFIX_Handler,
		},
		{
			MethodName: "sendMessage",
			Handler:    _Act_SendMessage_Handler,
		},
		{
			MethodName: "placeQuoteRequestFIX",
			Handler:    _Act_PlaceQuoteRequestFIX_Handler,
		},
		{
			MethodName: "placeQuoteFIX",
			Handler:    _Act_PlaceQuoteFIX_Handler,
		},
		{
			MethodName: "placeOrderMassCancelRequestFIX",
			Handler:    _Act_PlaceOrderMassCancelRequestFIX_Handler,
		},
		{
			MethodName: "placeQuoteCancelFIX",
			Handler:    _Act_PlaceQuoteCancelFIX_Handler,
		},
		{
			MethodName: "placeQuoteResponseFIX",
			Handler:    _Act_PlaceQuoteResponseFIX_Handler,
		},
		{
			MethodName: "placeSecurityStatusRequest",
			Handler:    _Act_PlaceSecurityStatusRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/act.proto",
}
