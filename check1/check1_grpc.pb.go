// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: check1.proto

package check1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Check1Client is the client API for Check1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Check1Client interface {
	CreateCheckpoint(ctx context.Context, in *CheckpointRequest, opts ...grpc.CallOption) (*CheckpointResponse, error)
	SubmitCheckRule(ctx context.Context, in *CheckRuleRequest, opts ...grpc.CallOption) (*CheckRuleResponse, error)
	SubmitCheckSequenceRule(ctx context.Context, in *CheckSequenceRuleRequest, opts ...grpc.CallOption) (*CheckSequenceRuleResponse, error)
	SubmitNoMessageCheck(ctx context.Context, in *NoMessageCheckRequest, opts ...grpc.CallOption) (*NoMessageCheckResponse, error)
}

type check1Client struct {
	cc grpc.ClientConnInterface
}

func NewCheck1Client(cc grpc.ClientConnInterface) Check1Client {
	return &check1Client{cc}
}

func (c *check1Client) CreateCheckpoint(ctx context.Context, in *CheckpointRequest, opts ...grpc.CallOption) (*CheckpointResponse, error) {
	out := new(CheckpointResponse)
	err := c.cc.Invoke(ctx, "/Check1/createCheckpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *check1Client) SubmitCheckRule(ctx context.Context, in *CheckRuleRequest, opts ...grpc.CallOption) (*CheckRuleResponse, error) {
	out := new(CheckRuleResponse)
	err := c.cc.Invoke(ctx, "/Check1/submitCheckRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *check1Client) SubmitCheckSequenceRule(ctx context.Context, in *CheckSequenceRuleRequest, opts ...grpc.CallOption) (*CheckSequenceRuleResponse, error) {
	out := new(CheckSequenceRuleResponse)
	err := c.cc.Invoke(ctx, "/Check1/submitCheckSequenceRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *check1Client) SubmitNoMessageCheck(ctx context.Context, in *NoMessageCheckRequest, opts ...grpc.CallOption) (*NoMessageCheckResponse, error) {
	out := new(NoMessageCheckResponse)
	err := c.cc.Invoke(ctx, "/Check1/submitNoMessageCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Check1Server is the server API for Check1 service.
// All implementations must embed UnimplementedCheck1Server
// for forward compatibility
type Check1Server interface {
	CreateCheckpoint(context.Context, *CheckpointRequest) (*CheckpointResponse, error)
	SubmitCheckRule(context.Context, *CheckRuleRequest) (*CheckRuleResponse, error)
	SubmitCheckSequenceRule(context.Context, *CheckSequenceRuleRequest) (*CheckSequenceRuleResponse, error)
	SubmitNoMessageCheck(context.Context, *NoMessageCheckRequest) (*NoMessageCheckResponse, error)
	mustEmbedUnimplementedCheck1Server()
}

// UnimplementedCheck1Server must be embedded to have forward compatible implementations.
type UnimplementedCheck1Server struct {
}

func (UnimplementedCheck1Server) CreateCheckpoint(context.Context, *CheckpointRequest) (*CheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCheckpoint not implemented")
}
func (UnimplementedCheck1Server) SubmitCheckRule(context.Context, *CheckRuleRequest) (*CheckRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitCheckRule not implemented")
}
func (UnimplementedCheck1Server) SubmitCheckSequenceRule(context.Context, *CheckSequenceRuleRequest) (*CheckSequenceRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitCheckSequenceRule not implemented")
}
func (UnimplementedCheck1Server) SubmitNoMessageCheck(context.Context, *NoMessageCheckRequest) (*NoMessageCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitNoMessageCheck not implemented")
}
func (UnimplementedCheck1Server) mustEmbedUnimplementedCheck1Server() {}

// UnsafeCheck1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Check1Server will
// result in compilation errors.
type UnsafeCheck1Server interface {
	mustEmbedUnimplementedCheck1Server()
}

func RegisterCheck1Server(s grpc.ServiceRegistrar, srv Check1Server) {
	s.RegisterService(&Check1_ServiceDesc, srv)
}

func _Check1_CreateCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Check1Server).CreateCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Check1/createCheckpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Check1Server).CreateCheckpoint(ctx, req.(*CheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Check1_SubmitCheckRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Check1Server).SubmitCheckRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Check1/submitCheckRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Check1Server).SubmitCheckRule(ctx, req.(*CheckRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Check1_SubmitCheckSequenceRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSequenceRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Check1Server).SubmitCheckSequenceRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Check1/submitCheckSequenceRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Check1Server).SubmitCheckSequenceRule(ctx, req.(*CheckSequenceRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Check1_SubmitNoMessageCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoMessageCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Check1Server).SubmitNoMessageCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Check1/submitNoMessageCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Check1Server).SubmitNoMessageCheck(ctx, req.(*NoMessageCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Check1_ServiceDesc is the grpc.ServiceDesc for Check1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Check1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Check1",
	HandlerType: (*Check1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createCheckpoint",
			Handler:    _Check1_CreateCheckpoint_Handler,
		},
		{
			MethodName: "submitCheckRule",
			Handler:    _Check1_SubmitCheckRule_Handler,
		},
		{
			MethodName: "submitCheckSequenceRule",
			Handler:    _Check1_SubmitCheckSequenceRule_Handler,
		},
		{
			MethodName: "submitNoMessageCheck",
			Handler:    _Check1_SubmitNoMessageCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "check1.proto",
}
