//
// Copyright 2020-2021 Exactpro (Exactpro Systems Limited)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.4
// source: check1.proto

package check1

import (
	proto "github.com/th2-net/th2-common-go/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CheckpointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description   string         `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	ParentEventId *proto.EventID `protobuf:"bytes,2,opt,name=parent_event_id,json=parentEventId,proto3" json:"parent_event_id,omitempty"`
}

func (x *CheckpointRequest) Reset() {
	*x = CheckpointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_check1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckpointRequest) ProtoMessage() {}

func (x *CheckpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_check1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckpointRequest.ProtoReflect.Descriptor instead.
func (*CheckpointRequest) Descriptor() ([]byte, []int) {
	return file_check1_proto_rawDescGZIP(), []int{0}
}

func (x *CheckpointRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CheckpointRequest) GetParentEventId() *proto.EventID {
	if x != nil {
		return x.ParentEventId
	}
	return nil
}

type CheckpointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Checkpoint *proto.Checkpoint    `protobuf:"bytes,1,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
	Status     *proto.RequestStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CheckpointResponse) Reset() {
	*x = CheckpointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_check1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckpointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckpointResponse) ProtoMessage() {}

func (x *CheckpointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_check1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckpointResponse.ProtoReflect.Descriptor instead.
func (*CheckpointResponse) Descriptor() ([]byte, []int) {
	return file_check1_proto_rawDescGZIP(), []int{1}
}

func (x *CheckpointResponse) GetCheckpoint() *proto.Checkpoint {
	if x != nil {
		return x.Checkpoint
	}
	return nil
}

func (x *CheckpointResponse) GetStatus() *proto.RequestStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type ChainID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ChainID) Reset() {
	*x = ChainID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_check1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainID) ProtoMessage() {}

func (x *ChainID) ProtoReflect() protoreflect.Message {
	mi := &file_check1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainID.ProtoReflect.Descriptor instead.
func (*ChainID) Descriptor() ([]byte, []int) {
	return file_check1_proto_rawDescGZIP(), []int{2}
}

func (x *ChainID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CheckRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectivityId *proto.ConnectionID `protobuf:"bytes,1,opt,name=connectivity_id,json=connectivityId,proto3" json:"connectivity_id,omitempty"`
	// Types that are assignable to Kind:
	//
	//	*CheckRuleRequest_Filter
	//	*CheckRuleRequest_RootFilter
	Kind           isCheckRuleRequest_Kind `protobuf_oneof:"kind"`
	Checkpoint     *proto.Checkpoint       `protobuf:"bytes,3,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`                                 // Registered Checkpoint. If the chain_id is also set in the request the checkpoint will be ignored
	MessageTimeout int64                   `protobuf:"varint,11,opt,name=message_timeout,json=messageTimeout,proto3" json:"message_timeout,omitempty"` // Timeout to wait for messages after checkpoint. The message's timestamp will be used to compute the timeout
	Timeout        int64                   `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`                                      // Timeout for rule execution. Uses the real time to limit the execution of the rule
	ParentEventId  *proto.EventID          `protobuf:"bytes,6,opt,name=parent_event_id,json=parentEventId,proto3" json:"parent_event_id,omitempty"`
	Description    string                  `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Direction      proto.Direction         `protobuf:"varint,8,opt,name=direction,proto3,enum=Direction" json:"direction,omitempty"`
	ChainId        *ChainID                `protobuf:"bytes,9,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"` // The chain id to continue checking.
}

func (x *CheckRuleRequest) Reset() {
	*x = CheckRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_check1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRuleRequest) ProtoMessage() {}

func (x *CheckRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_check1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRuleRequest.ProtoReflect.Descriptor instead.
func (*CheckRuleRequest) Descriptor() ([]byte, []int) {
	return file_check1_proto_rawDescGZIP(), []int{3}
}

func (x *CheckRuleRequest) GetConnectivityId() *proto.ConnectionID {
	if x != nil {
		return x.ConnectivityId
	}
	return nil
}

func (m *CheckRuleRequest) GetKind() isCheckRuleRequest_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

// Deprecated: Do not use.
func (x *CheckRuleRequest) GetFilter() *proto.MessageFilter {
	if x, ok := x.GetKind().(*CheckRuleRequest_Filter); ok {
		return x.Filter
	}
	return nil
}

func (x *CheckRuleRequest) GetRootFilter() *proto.RootMessageFilter {
	if x, ok := x.GetKind().(*CheckRuleRequest_RootFilter); ok {
		return x.RootFilter
	}
	return nil
}

func (x *CheckRuleRequest) GetCheckpoint() *proto.Checkpoint {
	if x != nil {
		return x.Checkpoint
	}
	return nil
}

func (x *CheckRuleRequest) GetMessageTimeout() int64 {
	if x != nil {
		return x.MessageTimeout
	}
	return 0
}

func (x *CheckRuleRequest) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *CheckRuleRequest) GetParentEventId() *proto.EventID {
	if x != nil {
		return x.ParentEventId
	}
	return nil
}

func (x *CheckRuleRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CheckRuleRequest) GetDirection() proto.Direction {
	if x != nil {
		return x.Direction
	}
	return proto.Direction(0)
}

func (x *CheckRuleRequest) GetChainId() *ChainID {
	if x != nil {
		return x.ChainId
	}
	return nil
}

type isCheckRuleRequest_Kind interface {
	isCheckRuleRequest_Kind()
}

type CheckRuleRequest_Filter struct {
	// This filter will be converted to the RootMessageFilter.
	// The field will be removed in future releases
	//
	// Deprecated: Do not use.
	Filter *proto.MessageFilter `protobuf:"bytes,2,opt,name=filter,proto3,oneof"`
}

type CheckRuleRequest_RootFilter struct {
	RootFilter *proto.RootMessageFilter `protobuf:"bytes,10,opt,name=root_filter,json=rootFilter,proto3,oneof"`
}

func (*CheckRuleRequest_Filter) isCheckRuleRequest_Kind() {}

func (*CheckRuleRequest_RootFilter) isCheckRuleRequest_Kind() {}

type CheckRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *proto.RequestStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ChainId *ChainID             `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"` // You can use it to unite the next rule to the chain with currently submitted one
}

func (x *CheckRuleResponse) Reset() {
	*x = CheckRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_check1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRuleResponse) ProtoMessage() {}

func (x *CheckRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_check1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRuleResponse.ProtoReflect.Descriptor instead.
func (*CheckRuleResponse) Descriptor() ([]byte, []int) {
	return file_check1_proto_rawDescGZIP(), []int{4}
}

func (x *CheckRuleResponse) GetStatus() *proto.RequestStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CheckRuleResponse) GetChainId() *ChainID {
	if x != nil {
		return x.ChainId
	}
	return nil
}

type CheckSequenceRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreFilter *PreFilter `protobuf:"bytes,1,opt,name=pre_filter,json=preFilter,proto3" json:"pre_filter,omitempty"`
	// This filters will be converted to root_filters if they are not set.
	// If message_filters and root_filters are both set the error response will be returned.
	//
	// Deprecated: Do not use.
	MessageFilters []*proto.MessageFilter `protobuf:"bytes,2,rep,name=message_filters,json=messageFilters,proto3" json:"message_filters,omitempty"`
	// Either this field or message_filters must be set. If both are set the error response will be received from check1
	RootMessageFilters []*proto.RootMessageFilter `protobuf:"bytes,12,rep,name=root_message_filters,json=rootMessageFilters,proto3" json:"root_message_filters,omitempty"`
	Checkpoint         *proto.Checkpoint          `protobuf:"bytes,3,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`                                 // Registered Checkpoint. If the chain_id is also set in the request the checkpoint will be ignored
	MessageTimeout     int64                      `protobuf:"varint,13,opt,name=message_timeout,json=messageTimeout,proto3" json:"message_timeout,omitempty"` // Timeout to wait for messages after checkpoint. The message's timestamp will be used to compute the timeout
	Timeout            int64                      `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`                                      // Timeout for rule execution. Uses the real time to limit the execution of the rule
	ConnectivityId     *proto.ConnectionID        `protobuf:"bytes,5,opt,name=connectivity_id,json=connectivityId,proto3" json:"connectivity_id,omitempty"`
	ParentEventId      *proto.EventID             `protobuf:"bytes,7,opt,name=parent_event_id,json=parentEventId,proto3" json:"parent_event_id,omitempty"`
	CheckOrder         bool                       `protobuf:"varint,8,opt,name=check_order,json=checkOrder,proto3" json:"check_order,omitempty"`
	Description        string                     `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	Direction          proto.Direction            `protobuf:"varint,10,opt,name=direction,proto3,enum=Direction" json:"direction,omitempty"`
	ChainId            *ChainID                   `protobuf:"bytes,11,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"` // The chain id to continue checking.
	// If it's not set the check will be started from the specified checkpoint otherwise checkpoint will be ignored
	SilenceCheck *wrapperspb.BoolValue `protobuf:"bytes,14,opt,name=silence_check,json=silenceCheck,proto3" json:"silence_check,omitempty"`
}

func (x *CheckSequenceRuleRequest) Reset() {
	*x = CheckSequenceRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_check1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSequenceRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSequenceRuleRequest) ProtoMessage() {}

func (x *CheckSequenceRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_check1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSequenceRuleRequest.ProtoReflect.Descriptor instead.
func (*CheckSequenceRuleRequest) Descriptor() ([]byte, []int) {
	return file_check1_proto_rawDescGZIP(), []int{5}
}

func (x *CheckSequenceRuleRequest) GetPreFilter() *PreFilter {
	if x != nil {
		return x.PreFilter
	}
	return nil
}

// Deprecated: Do not use.
func (x *CheckSequenceRuleRequest) GetMessageFilters() []*proto.MessageFilter {
	if x != nil {
		return x.MessageFilters
	}
	return nil
}

func (x *CheckSequenceRuleRequest) GetRootMessageFilters() []*proto.RootMessageFilter {
	if x != nil {
		return x.RootMessageFilters
	}
	return nil
}

func (x *CheckSequenceRuleRequest) GetCheckpoint() *proto.Checkpoint {
	if x != nil {
		return x.Checkpoint
	}
	return nil
}

func (x *CheckSequenceRuleRequest) GetMessageTimeout() int64 {
	if x != nil {
		return x.MessageTimeout
	}
	return 0
}

func (x *CheckSequenceRuleRequest) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *CheckSequenceRuleRequest) GetConnectivityId() *proto.ConnectionID {
	if x != nil {
		return x.ConnectivityId
	}
	return nil
}

func (x *CheckSequenceRuleRequest) GetParentEventId() *proto.EventID {
	if x != nil {
		return x.ParentEventId
	}
	return nil
}

func (x *CheckSequenceRuleRequest) GetCheckOrder() bool {
	if x != nil {
		return x.CheckOrder
	}
	return false
}

func (x *CheckSequenceRuleRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CheckSequenceRuleRequest) GetDirection() proto.Direction {
	if x != nil {
		return x.Direction
	}
	return proto.Direction(0)
}

func (x *CheckSequenceRuleRequest) GetChainId() *ChainID {
	if x != nil {
		return x.ChainId
	}
	return nil
}

func (x *CheckSequenceRuleRequest) GetSilenceCheck() *wrapperspb.BoolValue {
	if x != nil {
		return x.SilenceCheck
	}
	return nil
}

type CheckSequenceRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *proto.RequestStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ChainId *ChainID             `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"` // You can use it to unite the next rule to the chain with currently submitted one
}

func (x *CheckSequenceRuleResponse) Reset() {
	*x = CheckSequenceRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_check1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSequenceRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSequenceRuleResponse) ProtoMessage() {}

func (x *CheckSequenceRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_check1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSequenceRuleResponse.ProtoReflect.Descriptor instead.
func (*CheckSequenceRuleResponse) Descriptor() ([]byte, []int) {
	return file_check1_proto_rawDescGZIP(), []int{6}
}

func (x *CheckSequenceRuleResponse) GetStatus() *proto.RequestStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CheckSequenceRuleResponse) GetChainId() *ChainID {
	if x != nil {
		return x.ChainId
	}
	return nil
}

type PreFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields         map[string]*proto.ValueFilter `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MetadataFilter *proto.MetadataFilter         `protobuf:"bytes,3,opt,name=metadata_filter,json=metadataFilter,proto3" json:"metadata_filter,omitempty"`
}

func (x *PreFilter) Reset() {
	*x = PreFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_check1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreFilter) ProtoMessage() {}

func (x *PreFilter) ProtoReflect() protoreflect.Message {
	mi := &file_check1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreFilter.ProtoReflect.Descriptor instead.
func (*PreFilter) Descriptor() ([]byte, []int) {
	return file_check1_proto_rawDescGZIP(), []int{7}
}

func (x *PreFilter) GetFields() map[string]*proto.ValueFilter {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *PreFilter) GetMetadataFilter() *proto.MetadataFilter {
	if x != nil {
		return x.MetadataFilter
	}
	return nil
}

type NoMessageCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreFilter      *PreFilter          `protobuf:"bytes,1,opt,name=pre_filter,json=preFilter,proto3" json:"pre_filter,omitempty"`
	MessageTimeout int64               `protobuf:"varint,2,opt,name=message_timeout,json=messageTimeout,proto3" json:"message_timeout,omitempty"` // Timeout to wait for messages after checkpoint. The message's timestamp will be used to compute the timeout
	Timeout        int64               `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`                                     // Timeout for rule execution. Uses the real time to limit the execution of the rule
	Checkpoint     *proto.Checkpoint   `protobuf:"bytes,4,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`                                // Registered Checkpoint. If the chain_id is also set in the request the checkpoint will be ignored
	ChainId        *ChainID            `protobuf:"bytes,5,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`                       // You can use it to unite the next rule to the chain with currently submitted one
	ConnectivityId *proto.ConnectionID `protobuf:"bytes,6,opt,name=connectivity_id,json=connectivityId,proto3" json:"connectivity_id,omitempty"`
	ParentEventId  *proto.EventID      `protobuf:"bytes,7,opt,name=parent_event_id,json=parentEventId,proto3" json:"parent_event_id,omitempty"`
	Description    string              `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	Direction      proto.Direction     `protobuf:"varint,9,opt,name=direction,proto3,enum=Direction" json:"direction,omitempty"`
}

func (x *NoMessageCheckRequest) Reset() {
	*x = NoMessageCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_check1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoMessageCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoMessageCheckRequest) ProtoMessage() {}

func (x *NoMessageCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_check1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoMessageCheckRequest.ProtoReflect.Descriptor instead.
func (*NoMessageCheckRequest) Descriptor() ([]byte, []int) {
	return file_check1_proto_rawDescGZIP(), []int{8}
}

func (x *NoMessageCheckRequest) GetPreFilter() *PreFilter {
	if x != nil {
		return x.PreFilter
	}
	return nil
}

func (x *NoMessageCheckRequest) GetMessageTimeout() int64 {
	if x != nil {
		return x.MessageTimeout
	}
	return 0
}

func (x *NoMessageCheckRequest) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *NoMessageCheckRequest) GetCheckpoint() *proto.Checkpoint {
	if x != nil {
		return x.Checkpoint
	}
	return nil
}

func (x *NoMessageCheckRequest) GetChainId() *ChainID {
	if x != nil {
		return x.ChainId
	}
	return nil
}

func (x *NoMessageCheckRequest) GetConnectivityId() *proto.ConnectionID {
	if x != nil {
		return x.ConnectivityId
	}
	return nil
}

func (x *NoMessageCheckRequest) GetParentEventId() *proto.EventID {
	if x != nil {
		return x.ParentEventId
	}
	return nil
}

func (x *NoMessageCheckRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NoMessageCheckRequest) GetDirection() proto.Direction {
	if x != nil {
		return x.Direction
	}
	return proto.Direction(0)
}

type NoMessageCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *proto.RequestStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ChainId *ChainID             `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"` // You can use it to unite the next rule to the chain with currently submitted one
}

func (x *NoMessageCheckResponse) Reset() {
	*x = NoMessageCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_check1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoMessageCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoMessageCheckResponse) ProtoMessage() {}

func (x *NoMessageCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_check1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoMessageCheckResponse.ProtoReflect.Descriptor instead.
func (*NoMessageCheckResponse) Descriptor() ([]byte, []int) {
	return file_check1_proto_rawDescGZIP(), []int{9}
}

func (x *NoMessageCheckResponse) GetStatus() *proto.RequestStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *NoMessageCheckResponse) GetChainId() *ChainID {
	if x != nil {
		return x.ChainId
	}
	return nil
}

var File_check1_proto protoreflect.FileDescriptor

var file_check1_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x67, 0x0a, 0x11,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x19, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd0, 0x03, 0x0a, 0x10,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x36, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x52, 0x6f,
	0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x0a, 0x72, 0x6f, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a,
	0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x30, 0x0a,
	0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0x60,
	0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x22, 0xfb, 0x04, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x0a, 0x70, 0x72, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x70,
	0x72, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x14, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x12, 0x72, 0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x0a, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x36, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x69, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x69, 0x6c, 0x65,
	0x6e, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0x68,
	0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0xc4, 0x01, 0x0a, 0x09, 0x50, 0x72, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x1a, 0x47, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22,
	0x8d, 0x03, 0x0a, 0x15, 0x4e, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0a, 0x70, 0x72, 0x65,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x50, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x70, 0x72, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x65, 0x0a, 0x16, 0x4e, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x23, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x32, 0xa2, 0x02, 0x0a, 0x06, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x31, 0x12, 0x3d, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x3a, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x11, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x17,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x19, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x49, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4e, 0x6f, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x16, 0x2e, 0x4e, 0x6f, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x4e, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2b, 0x5a, 0x29, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x32, 0x2d, 0x6e, 0x65,
	0x74, 0x2f, 0x74, 0x68, 0x32, 0x2d, 0x64, 0x65, 0x6d, 0x6f, 0x2d, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_check1_proto_rawDescOnce sync.Once
	file_check1_proto_rawDescData = file_check1_proto_rawDesc
)

func file_check1_proto_rawDescGZIP() []byte {
	file_check1_proto_rawDescOnce.Do(func() {
		file_check1_proto_rawDescData = protoimpl.X.CompressGZIP(file_check1_proto_rawDescData)
	})
	return file_check1_proto_rawDescData
}

var file_check1_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_check1_proto_goTypes = []interface{}{
	(*CheckpointRequest)(nil),         // 0: CheckpointRequest
	(*CheckpointResponse)(nil),        // 1: CheckpointResponse
	(*ChainID)(nil),                   // 2: ChainID
	(*CheckRuleRequest)(nil),          // 3: CheckRuleRequest
	(*CheckRuleResponse)(nil),         // 4: CheckRuleResponse
	(*CheckSequenceRuleRequest)(nil),  // 5: CheckSequenceRuleRequest
	(*CheckSequenceRuleResponse)(nil), // 6: CheckSequenceRuleResponse
	(*PreFilter)(nil),                 // 7: PreFilter
	(*NoMessageCheckRequest)(nil),     // 8: NoMessageCheckRequest
	(*NoMessageCheckResponse)(nil),    // 9: NoMessageCheckResponse
	nil,                               // 10: PreFilter.FieldsEntry
	(*proto.EventID)(nil),             // 11: EventID
	(*proto.Checkpoint)(nil),          // 12: Checkpoint
	(*proto.RequestStatus)(nil),       // 13: RequestStatus
	(*proto.ConnectionID)(nil),        // 14: ConnectionID
	(*proto.MessageFilter)(nil),       // 15: MessageFilter
	(*proto.RootMessageFilter)(nil),   // 16: RootMessageFilter
	(proto.Direction)(0),              // 17: Direction
	(*wrapperspb.BoolValue)(nil),      // 18: google.protobuf.BoolValue
	(*proto.MetadataFilter)(nil),      // 19: MetadataFilter
	(*proto.ValueFilter)(nil),         // 20: ValueFilter
}
var file_check1_proto_depIdxs = []int32{
	11, // 0: CheckpointRequest.parent_event_id:type_name -> EventID
	12, // 1: CheckpointResponse.checkpoint:type_name -> Checkpoint
	13, // 2: CheckpointResponse.status:type_name -> RequestStatus
	14, // 3: CheckRuleRequest.connectivity_id:type_name -> ConnectionID
	15, // 4: CheckRuleRequest.filter:type_name -> MessageFilter
	16, // 5: CheckRuleRequest.root_filter:type_name -> RootMessageFilter
	12, // 6: CheckRuleRequest.checkpoint:type_name -> Checkpoint
	11, // 7: CheckRuleRequest.parent_event_id:type_name -> EventID
	17, // 8: CheckRuleRequest.direction:type_name -> Direction
	2,  // 9: CheckRuleRequest.chain_id:type_name -> ChainID
	13, // 10: CheckRuleResponse.status:type_name -> RequestStatus
	2,  // 11: CheckRuleResponse.chain_id:type_name -> ChainID
	7,  // 12: CheckSequenceRuleRequest.pre_filter:type_name -> PreFilter
	15, // 13: CheckSequenceRuleRequest.message_filters:type_name -> MessageFilter
	16, // 14: CheckSequenceRuleRequest.root_message_filters:type_name -> RootMessageFilter
	12, // 15: CheckSequenceRuleRequest.checkpoint:type_name -> Checkpoint
	14, // 16: CheckSequenceRuleRequest.connectivity_id:type_name -> ConnectionID
	11, // 17: CheckSequenceRuleRequest.parent_event_id:type_name -> EventID
	17, // 18: CheckSequenceRuleRequest.direction:type_name -> Direction
	2,  // 19: CheckSequenceRuleRequest.chain_id:type_name -> ChainID
	18, // 20: CheckSequenceRuleRequest.silence_check:type_name -> google.protobuf.BoolValue
	13, // 21: CheckSequenceRuleResponse.status:type_name -> RequestStatus
	2,  // 22: CheckSequenceRuleResponse.chain_id:type_name -> ChainID
	10, // 23: PreFilter.fields:type_name -> PreFilter.FieldsEntry
	19, // 24: PreFilter.metadata_filter:type_name -> MetadataFilter
	7,  // 25: NoMessageCheckRequest.pre_filter:type_name -> PreFilter
	12, // 26: NoMessageCheckRequest.checkpoint:type_name -> Checkpoint
	2,  // 27: NoMessageCheckRequest.chain_id:type_name -> ChainID
	14, // 28: NoMessageCheckRequest.connectivity_id:type_name -> ConnectionID
	11, // 29: NoMessageCheckRequest.parent_event_id:type_name -> EventID
	17, // 30: NoMessageCheckRequest.direction:type_name -> Direction
	13, // 31: NoMessageCheckResponse.status:type_name -> RequestStatus
	2,  // 32: NoMessageCheckResponse.chain_id:type_name -> ChainID
	20, // 33: PreFilter.FieldsEntry.value:type_name -> ValueFilter
	0,  // 34: Check1.createCheckpoint:input_type -> CheckpointRequest
	3,  // 35: Check1.submitCheckRule:input_type -> CheckRuleRequest
	5,  // 36: Check1.submitCheckSequenceRule:input_type -> CheckSequenceRuleRequest
	8,  // 37: Check1.submitNoMessageCheck:input_type -> NoMessageCheckRequest
	1,  // 38: Check1.createCheckpoint:output_type -> CheckpointResponse
	4,  // 39: Check1.submitCheckRule:output_type -> CheckRuleResponse
	6,  // 40: Check1.submitCheckSequenceRule:output_type -> CheckSequenceRuleResponse
	9,  // 41: Check1.submitNoMessageCheck:output_type -> NoMessageCheckResponse
	38, // [38:42] is the sub-list for method output_type
	34, // [34:38] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_check1_proto_init() }
func file_check1_proto_init() {
	if File_check1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_check1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckpointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_check1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckpointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_check1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_check1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_check1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_check1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSequenceRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_check1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSequenceRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_check1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_check1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoMessageCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_check1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoMessageCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_check1_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*CheckRuleRequest_Filter)(nil),
		(*CheckRuleRequest_RootFilter)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_check1_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_check1_proto_goTypes,
		DependencyIndexes: file_check1_proto_depIdxs,
		MessageInfos:      file_check1_proto_msgTypes,
	}.Build()
	File_check1_proto = out.File
	file_check1_proto_rawDesc = nil
	file_check1_proto_goTypes = nil
	file_check1_proto_depIdxs = nil
}
